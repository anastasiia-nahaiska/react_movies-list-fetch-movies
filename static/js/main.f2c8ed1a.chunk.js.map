{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","title","description","imdbUrl","imgUrl","className","src","alt","href","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","useState","findedMovie","setFindedMovie","setQuery","loading","setLoading","hasError","setHasError","findMovie","event","a","preventDefault","movieFromApi","Poster","Title","Plot","imdbID","htmlFor","type","id","placeholder","value","onChange","target","applyQuery","cn","onClick","App","setMovies","newMovie","every","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2c8ed1a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(({ movie }) => {\n  const {\n    title,\n    description,\n    imdbUrl,\n    imgUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = '98ec4eff';\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\n// import { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [findedMovie, setFindedMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const applyQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setHasError(false);\n    setQuery(event.target.value);\n  };\n\n  const clearForm = () => {\n    setQuery('');\n    setFindedMovie(null);\n  };\n\n  const handleAddMovie = () => {\n    if (findedMovie) {\n      addMovie(findedMovie);\n    }\n\n    clearForm();\n  };\n\n  const findMovie = async (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setLoading(true);\n\n    try {\n      const movieFromApi = await getMovie(query);\n\n      if ('Error' in movieFromApi) {\n        setHasError(true);\n        setLoading(false);\n\n        return;\n      }\n\n      const {\n        Poster,\n        Title,\n        Plot,\n        imdbID,\n      } = movieFromApi as MovieData;\n\n      setFindedMovie({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n        imdbId: imdbID,\n      });\n    } catch (error) {\n      setHasError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => applyQuery(event)}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          {query && (\n            <div className=\"control\">\n              <button\n                data-cy=\"searchButton\"\n                type=\"submit\"\n                className={cn(\n                  'button is-light',\n                  { 'is-loading': loading },\n                )}\n                onClick={(event) => findMovie(event)}\n              >\n                {findedMovie\n                  ? 'Search again'\n                  : 'Find a movie'}\n              </button>\n            </div>\n          )}\n\n          {findedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {findedMovie && (\n          <MovieCard movie={findedMovie} />\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (newMovie: Movie) => {\n    if (movies.every(movie => movie.imdbId !== newMovie.imdbId)) {\n      setMovies(currentMovies => [\n        ...currentMovies,\n        newMovie,\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}